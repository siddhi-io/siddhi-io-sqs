{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi IO SQS The siddhi-io-sqs extension is an extension to Siddhi that used to receive and publish events via AWS SQS Service. This extension allows users to subscribe to a SQS queue and receive/publish SQS messages. For information on Siddhi and it's features refer Siddhi Documentation . Downloads Versions 3.x and above with group id io.siddhi.extension.* from here . Versions 2.x and lower with group id org.wso2.extension.siddhi. from here . Latest API Docs Latest API Docs is 3.0.1 . Features sqs (Sink) The sqs sink pushes the events into a sqs broker using the AMQP protocol sqs (Source) The sqs source receives the events from the sqs broker via the AMQP protocol. Dependencies Before using this extension, set up SQS as described in AWS Documentation - Setting up Amazon SQS . Installation For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions . Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#siddhi-io-sqs","text":"The siddhi-io-sqs extension is an extension to Siddhi that used to receive and publish events via AWS SQS Service. This extension allows users to subscribe to a SQS queue and receive/publish SQS messages. For information on Siddhi and it's features refer Siddhi Documentation .","title":"Siddhi IO SQS"},{"location":"#downloads","text":"Versions 3.x and above with group id io.siddhi.extension.* from here . Versions 2.x and lower with group id org.wso2.extension.siddhi. from here .","title":"Downloads"},{"location":"#latest-api-docs","text":"Latest API Docs is 3.0.1 .","title":"Latest API Docs"},{"location":"#features","text":"sqs (Sink) The sqs sink pushes the events into a sqs broker using the AMQP protocol sqs (Source) The sqs source receives the events from the sqs broker via the AMQP protocol.","title":"Features"},{"location":"#dependencies","text":"Before using this extension, set up SQS as described in AWS Documentation - Setting up Amazon SQS .","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"","title":"License"},{"location":"api/1.0.0/","text":"API Docs - v1.0.0 Sink sqs (Sink) Syntax @sink(type= sqs , @map(...))) Examples EXAMPLE 1 Source sqs (Source) SQS source allows users to subscribe and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , waiting.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services STRING No No secret.key Secret Key of the Amazon User STRING No No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No waiting.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue=' queue url ',access.key=' access_key ',secret.key=' secret_key ',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',waiting.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"1.0.0"},{"location":"api/1.0.0/#api-docs-v100","text":"","title":"API Docs - v1.0.0"},{"location":"api/1.0.0/#sink","text":"","title":"Sink"},{"location":"api/1.0.0/#sqs-sink","text":"Syntax @sink(type= sqs , @map(...))) Examples EXAMPLE 1","title":"sqs (Sink)"},{"location":"api/1.0.0/#source","text":"","title":"Source"},{"location":"api/1.0.0/#sqs-source","text":"SQS source allows users to subscribe and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , waiting.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services STRING No No secret.key Secret Key of the Amazon User STRING No No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No waiting.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue=' queue url ',access.key=' access_key ',secret.key=' secret_key ',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',waiting.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"sqs (Source)"},{"location":"api/1.0.1/","text":"API Docs - v1.0.1 Sink sqs (Sink) SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue=' queue_url ',access.key=' aws_access_key ',secret.key=' aws_secret_key ',region=' region ',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service Source sqs (Source) SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue=' queue url ',access.key=' access_key ',secret.key=' secret_key ',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"1.0.1"},{"location":"api/1.0.1/#api-docs-v101","text":"","title":"API Docs - v1.0.1"},{"location":"api/1.0.1/#sink","text":"","title":"Sink"},{"location":"api/1.0.1/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue=' queue_url ',access.key=' aws_access_key ',secret.key=' aws_secret_key ',region=' region ',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service","title":"sqs (Sink)"},{"location":"api/1.0.1/#source","text":"","title":"Source"},{"location":"api/1.0.1/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue=' queue url ',access.key=' access_key ',secret.key=' secret_key ',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"sqs (Source)"},{"location":"api/1.0.2/","text":"API Docs - v1.0.2 Sink sqs (Sink) SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue=' queue_url ',access.key=' aws_access_key ',secret.key=' aws_secret_key ',region=' region ',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service Source sqs (Source) SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue=' queue url ',access.key=' access_key ',secret.key=' secret_key ',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"1.0.2"},{"location":"api/1.0.2/#api-docs-v102","text":"","title":"API Docs - v1.0.2"},{"location":"api/1.0.2/#sink","text":"","title":"Sink"},{"location":"api/1.0.2/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue=' queue_url ',access.key=' aws_access_key ',secret.key=' aws_secret_key ',region=' region ',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service","title":"sqs (Sink)"},{"location":"api/1.0.2/#source","text":"","title":"Source"},{"location":"api/1.0.2/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue=' queue url ',access.key=' access_key ',secret.key=' secret_key ',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"sqs (Source)"},{"location":"api/1.0.3/","text":"API Docs - v1.0.3 Sink sqs (Sink) SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue=' queue_url ',access.key=' aws_access_key ',secret.key=' aws_secret_key ',region=' region ',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service Source sqs (Source) SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue=' queue url ',access.key=' access_key ',secret.key=' secret_key ',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"1.0.3"},{"location":"api/1.0.3/#api-docs-v103","text":"","title":"API Docs - v1.0.3"},{"location":"api/1.0.3/#sink","text":"","title":"Sink"},{"location":"api/1.0.3/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue=' queue_url ',access.key=' aws_access_key ',secret.key=' aws_secret_key ',region=' region ',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service","title":"sqs (Sink)"},{"location":"api/1.0.3/#source","text":"","title":"Source"},{"location":"api/1.0.3/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue=' queue url ',access.key=' access_key ',secret.key=' secret_key ',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"sqs (Source)"},{"location":"api/1.0.4/","text":"API Docs - v1.0.4 Sink sqs (Sink) SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue=' queue_url ',access.key=' aws_access_key ',secret.key=' aws_secret_key ',region=' region ',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service Source sqs (Source) SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue=' queue url ',access.key=' access_key ',secret.key=' secret_key ',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"1.0.4"},{"location":"api/1.0.4/#api-docs-v104","text":"","title":"API Docs - v1.0.4"},{"location":"api/1.0.4/#sink","text":"","title":"Sink"},{"location":"api/1.0.4/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue=' queue_url ',access.key=' aws_access_key ',secret.key=' aws_secret_key ',region=' region ',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service","title":"sqs (Sink)"},{"location":"api/1.0.4/#source","text":"","title":"Source"},{"location":"api/1.0.4/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue=' queue url ',access.key=' access_key ',secret.key=' secret_key ',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"sqs (Source)"},{"location":"api/1.0.5/","text":"API Docs - v1.0.5 Sink sqs (Sink) SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue=' queue_url ',access.key=' aws_access_key ',secret.key=' aws_secret_key ',region=' region ',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service Source sqs (Source) SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue=' queue url ',access.key=' access_key ',secret.key=' secret_key ',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"1.0.5"},{"location":"api/1.0.5/#api-docs-v105","text":"","title":"API Docs - v1.0.5"},{"location":"api/1.0.5/#sink","text":"","title":"Sink"},{"location":"api/1.0.5/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue=' queue_url ',access.key=' aws_access_key ',secret.key=' aws_secret_key ',region=' region ',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service","title":"sqs (Sink)"},{"location":"api/1.0.5/#source","text":"","title":"Source"},{"location":"api/1.0.5/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue=' queue url ',access.key=' access_key ',secret.key=' secret_key ',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"sqs (Source)"},{"location":"api/1.0.6/","text":"API Docs - v1.0.6 Sink sqs (Sink) SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue=' queue_url ',access.key=' aws_access_key ',secret.key=' aws_secret_key ',region=' region ',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service Source sqs (Source) SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue=' queue url ',access.key=' access_key ',secret.key=' secret_key ',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"1.0.6"},{"location":"api/1.0.6/#api-docs-v106","text":"","title":"API Docs - v1.0.6"},{"location":"api/1.0.6/#sink","text":"","title":"Sink"},{"location":"api/1.0.6/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue=' queue_url ',access.key=' aws_access_key ',secret.key=' aws_secret_key ',region=' region ',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service","title":"sqs (Sink)"},{"location":"api/1.0.6/#source","text":"","title":"Source"},{"location":"api/1.0.6/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue=' queue url ',access.key=' access_key ',secret.key=' secret_key ',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"sqs (Source)"},{"location":"api/1.0.7/","text":"API Docs - v1.0.7 Sink sqs (Sink) SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue=' queue_url ',access.key=' aws_access_key ',secret.key=' aws_secret_key ',region=' region ',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service Source sqs (Source) SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue=' queue url ',access.key=' access_key ',secret.key=' secret_key ',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"1.0.7"},{"location":"api/1.0.7/#api-docs-v107","text":"","title":"API Docs - v1.0.7"},{"location":"api/1.0.7/#sink","text":"","title":"Sink"},{"location":"api/1.0.7/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue=' queue_url ',access.key=' aws_access_key ',secret.key=' aws_secret_key ',region=' region ',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='charuka',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Following Example shows how to define a SQS sink to publish messages to the service","title":"sqs (Sink)"},{"location":"api/1.0.7/#source","text":"","title":"Source"},{"location":"api/1.0.7/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue=' queue url ',access.key=' access_key ',secret.key=' secret_key ',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Following Example shows how to define a SQS source to receive messages from the service","title":"sqs (Source)"},{"location":"api/1.0.8/","text":"API Docs - v1.0.8 Sink sqs (Sink) SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='https://amazon.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. Then SQS sink will connect to the queue using provided configurations and send the message to the queue. EXAMPLE 2 @sink(type='sqs',queue='https://amazon.sqs.queue.fifo',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS FIFO queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. SQS sink will connect to the queue using provided configurations and send the messages to the queue. For each message deduplciation id will be selected from the attriibute 'deduplicationID' in the outStream. Source sqs (Source) SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='http://aws.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Above example demonstrate how an SQS source is getting configured in order to consume messages from an SQS queue. SQS source will establish the connection to a queue using given configurations and start consuming xml messages from the queue. Once a message is received by the source from the given queue, 'xml' mapper will generate a siddhi event from that message and pass it to the inStream.","title":"1.0.8"},{"location":"api/1.0.8/#api-docs-v108","text":"","title":"API Docs - v1.0.8"},{"location":"api/1.0.8/#sink","text":"","title":"Sink"},{"location":"api/1.0.8/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='https://amazon.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. Then SQS sink will connect to the queue using provided configurations and send the message to the queue. EXAMPLE 2 @sink(type='sqs',queue='https://amazon.sqs.queue.fifo',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS FIFO queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. SQS sink will connect to the queue using provided configurations and send the messages to the queue. For each message deduplciation id will be selected from the attriibute 'deduplicationID' in the outStream.","title":"sqs (Sink)"},{"location":"api/1.0.8/#source","text":"","title":"Source"},{"location":"api/1.0.8/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='http://aws.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Above example demonstrate how an SQS source is getting configured in order to consume messages from an SQS queue. SQS source will establish the connection to a queue using given configurations and start consuming xml messages from the queue. Once a message is received by the source from the given queue, 'xml' mapper will generate a siddhi event from that message and pass it to the inStream.","title":"sqs (Source)"},{"location":"api/1.1.0/","text":"API Docs - v1.1.0 Sink sqs (Sink) SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='https://amazon.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. Then SQS sink will connect to the queue using provided configurations and send the message to the queue. EXAMPLE 2 @sink(type='sqs',queue='https://amazon.sqs.queue.fifo',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS FIFO queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. SQS sink will connect to the queue using provided configurations and send the messages to the queue. For each message deduplciation id will be selected from the attriibute 'deduplicationID' in the outStream. Source sqs (Source) SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='http://aws.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Above example demonstrate how an SQS source is getting configured in order to consume messages from an SQS queue. SQS source will establish the connection to a queue using given configurations and start consuming xml messages from the queue. Once a message is received by the source from the given queue, 'xml' mapper will generate a siddhi event from that message and pass it to the inStream.","title":"1.1.0"},{"location":"api/1.1.0/#api-docs-v110","text":"","title":"API Docs - v1.1.0"},{"location":"api/1.1.0/#sink","text":"","title":"Sink"},{"location":"api/1.1.0/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='https://amazon.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. Then SQS sink will connect to the queue using provided configurations and send the message to the queue. EXAMPLE 2 @sink(type='sqs',queue='https://amazon.sqs.queue.fifo',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS FIFO queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. SQS sink will connect to the queue using provided configurations and send the messages to the queue. For each message deduplciation id will be selected from the attriibute 'deduplicationID' in the outStream.","title":"sqs (Sink)"},{"location":"api/1.1.0/#source","text":"","title":"Source"},{"location":"api/1.1.0/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='http://aws.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Above example demonstrate how an SQS source is getting configured in order to consume messages from an SQS queue. SQS source will establish the connection to a queue using given configurations and start consuming xml messages from the queue. Once a message is received by the source from the given queue, 'xml' mapper will generate a siddhi event from that message and pass it to the inStream.","title":"sqs (Source)"},{"location":"api/2.0.0/","text":"API Docs - v2.0.0 Sink sqs (Sink) SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='https://amazon.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. Then SQS sink will connect to the queue using provided configurations and send the message to the queue. EXAMPLE 2 @sink(type='sqs',queue='https://amazon.sqs.queue.fifo',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS FIFO queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. SQS sink will connect to the queue using provided configurations and send the messages to the queue. For each message deduplciation id will be selected from the attriibute 'deduplicationID' in the outStream. Source sqs (Source) SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='http://aws.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Above example demonstrate how an SQS source is getting configured in order to consume messages from an SQS queue. SQS source will establish the connection to a queue using given configurations and start consuming xml messages from the queue. Once a message is received by the source from the given queue, 'xml' mapper will generate a siddhi event from that message and pass it to the inStream.","title":"2.0.0"},{"location":"api/2.0.0/#api-docs-v200","text":"","title":"API Docs - v2.0.0"},{"location":"api/2.0.0/#sink","text":"","title":"Sink"},{"location":"api/2.0.0/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='https://amazon.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. Then SQS sink will connect to the queue using provided configurations and send the message to the queue. EXAMPLE 2 @sink(type='sqs',queue='https://amazon.sqs.queue.fifo',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS FIFO queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. SQS sink will connect to the queue using provided configurations and send the messages to the queue. For each message deduplciation id will be selected from the attriibute 'deduplicationID' in the outStream.","title":"sqs (Sink)"},{"location":"api/2.0.0/#source","text":"","title":"Source"},{"location":"api/2.0.0/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='http://aws.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Above example demonstrate how an SQS source is getting configured in order to consume messages from an SQS queue. SQS source will establish the connection to a queue using given configurations and start consuming xml messages from the queue. Once a message is received by the source from the given queue, 'xml' mapper will generate a siddhi event from that message and pass it to the inStream.","title":"sqs (Source)"},{"location":"api/3.0.0/","text":"API Docs - v3.0.0 Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions. Sink sqs (Sink) SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='https://amazon.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. Then SQS sink will connect to the queue using provided configurations and send the message to the queue. EXAMPLE 2 @sink(type='sqs',queue='https://amazon.sqs.queue.fifo',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS FIFO queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. SQS sink will connect to the queue using provided configurations and send the messages to the queue. For each message deduplciation id will be selected from the attriibute 'deduplicationID' in the outStream. Source sqs (Source) SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='http://aws.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Above example demonstrate how an SQS source is getting configured in order to consume messages from an SQS queue. SQS source will establish the connection to a queue using given configurations and start consuming xml messages from the queue. Once a message is received by the source from the given queue, 'xml' mapper will generate a siddhi event from that message and pass it to the inStream.","title":"3.0.0"},{"location":"api/3.0.0/#api-docs-v300","text":"Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.0.0"},{"location":"api/3.0.0/#sink","text":"","title":"Sink"},{"location":"api/3.0.0/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='https://amazon.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. Then SQS sink will connect to the queue using provided configurations and send the message to the queue. EXAMPLE 2 @sink(type='sqs',queue='https://amazon.sqs.queue.fifo',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS FIFO queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. SQS sink will connect to the queue using provided configurations and send the messages to the queue. For each message deduplciation id will be selected from the attriibute 'deduplicationID' in the outStream.","title":"sqs (Sink)"},{"location":"api/3.0.0/#source","text":"","title":"Source"},{"location":"api/3.0.0/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='http://aws.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Above example demonstrate how an SQS source is getting configured in order to consume messages from an SQS queue. SQS source will establish the connection to a queue using given configurations and start consuming xml messages from the queue. Once a message is received by the source from the given queue, 'xml' mapper will generate a siddhi event from that message and pass it to the inStream.","title":"sqs (Source)"},{"location":"api/3.0.1/","text":"API Docs - v3.0.1 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Sink sqs (Sink) SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='https://amazon.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. Then SQS sink will connect to the queue using provided configurations and send the message to the queue. EXAMPLE 2 @sink(type='sqs',queue='https://amazon.sqs.queue.fifo',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS FIFO queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. SQS sink will connect to the queue using provided configurations and send the messages to the queue. For each message deduplciation id will be selected from the attriibute 'deduplicationID' in the outStream. Source sqs (Source) SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='http://aws.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Above example demonstrate how an SQS source is getting configured in order to consume messages from an SQS queue. SQS source will establish the connection to a queue using given configurations and start consuming xml messages from the queue. Once a message is received by the source from the given queue, 'xml' mapper will generate a siddhi event from that message and pass it to the inStream.","title":"3.0.1"},{"location":"api/3.0.1/#api-docs-v301","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.0.1"},{"location":"api/3.0.1/#sink","text":"","title":"Sink"},{"location":"api/3.0.1/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='https://amazon.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. Then SQS sink will connect to the queue using provided configurations and send the message to the queue. EXAMPLE 2 @sink(type='sqs',queue='https://amazon.sqs.queue.fifo',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS FIFO queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. SQS sink will connect to the queue using provided configurations and send the messages to the queue. For each message deduplciation id will be selected from the attriibute 'deduplicationID' in the outStream.","title":"sqs (Sink)"},{"location":"api/3.0.1/#source","text":"","title":"Source"},{"location":"api/3.0.1/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='http://aws.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Above example demonstrate how an SQS source is getting configured in order to consume messages from an SQS queue. SQS source will establish the connection to a queue using given configurations and start consuming xml messages from the queue. Once a message is received by the source from the given queue, 'xml' mapper will generate a siddhi event from that message and pass it to the inStream.","title":"sqs (Source)"},{"location":"api/latest/","text":"API Docs - v3.0.1 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Sink sqs (Sink) SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='https://amazon.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. Then SQS sink will connect to the queue using provided configurations and send the message to the queue. EXAMPLE 2 @sink(type='sqs',queue='https://amazon.sqs.queue.fifo',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS FIFO queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. SQS sink will connect to the queue using provided configurations and send the messages to the queue. For each message deduplciation id will be selected from the attriibute 'deduplicationID' in the outStream. Source sqs (Source) SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='http://aws.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Above example demonstrate how an SQS source is getting configured in order to consume messages from an SQS queue. SQS source will establish the connection to a queue using given configurations and start consuming xml messages from the queue. Once a message is received by the source from the given queue, 'xml' mapper will generate a siddhi event from that message and pass it to the inStream.","title":"latest"},{"location":"api/latest/#api-docs-v301","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.0.1"},{"location":"api/latest/#sink","text":"","title":"Sink"},{"location":"api/latest/#sqs-sink","text":"SQS sink allows users to connect and publish messages to an AWS SQS Queue. It has the ability to only publish Text messages Syntax @sink(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , message.group.id= STRING , deduplication.id= STRING , delay.interval= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue url which SQS Sink should connect to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the sink definition itself) none STRING Yes No region Amazon Web Service Region STRING No No message.group.id ID of the group that the message belong to(only applicable for FIFO Queues) null STRING Yes Yes deduplication.id ID by which a FIFO queue identifies the duplication in the queue(only applicable for FIFO queues) null STRING Yes Yes delay.interval Time in seconds for how long the message remain in the queue until it is available for the consumers to consume. -1 INT Yes No Examples EXAMPLE 1 @sink(type='sqs',queue='https://amazon.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. Then SQS sink will connect to the queue using provided configurations and send the message to the queue. EXAMPLE 2 @sink(type='sqs',queue='https://amazon.sqs.queue.fifo',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-1',delay.interval='5',deduplication.id='{{deduplicationID}}',message.group.id='group-1',@map(type='xml') )define stream outStream(symbol string, deduplicationID string); Above example demonstrate how an SQS sink is getting configured in order to publish messages to a SQS FIFO queue. Once an event is received by outStream, an xml message will be generated by 'xml' mapper from the attribute values of the event. SQS sink will connect to the queue using provided configurations and send the messages to the queue. For each message deduplciation id will be selected from the attriibute 'deduplicationID' in the outStream.","title":"sqs (Sink)"},{"location":"api/latest/#source","text":"","title":"Source"},{"location":"api/latest/#sqs-source","text":"SQS source allows users to connect and consume messages from a AWS SQS Queue. It has the ability to receive Text messages Syntax @source(type= sqs , queue= STRING , access.key= STRING , secret.key= STRING , region= STRING , polling.interval= INT , wait.time= INT , max.number.of.messages= INT , visibility.timeout= INT , delete.messages= BOOL , delete.retry.interval= INT , max.number.of.delete.retry.attempts= INT , number.of.parallel.consumers= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic queue Queue name which SQS Source should subscribe to STRING No No access.key Access Key for the Amazon Web Services. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No secret.key Secret Key of the Amazon User. (This is a mandatory field and should be provided either in the deployment.yml or in the source definition itself) null STRING Yes No region Amazon Web Service Region STRING No No polling.interval Interval (in milliseconds) between two message retrieval operations INT No No wait.time Maximum amount (in seconds) that a polling call will wait for a message to become available in the queue -1 INT Yes No max.number.of.messages Maximum number of messages retrieved from the queue per polling call (Actual maybe smaller than this even if there's more messages in the queue) 1 INT No No visibility.timeout The length of time (in seconds) for which a message received from a queue will be invisible to other consumers(only applicable if consumer doesn't purge the received messages from the queue). -1 INT Yes No delete.messages Should the message be deleted from the queue after consuming it. delete.messages BOOL Yes No delete.retry.interval Time interval (in milliseconds) consumer should retry to delete a message in the case of failure during a message delete operation. 5000 INT Yes No max.number.of.delete.retry.attempts Maximum number retry attempts to be performed in case of a failure. 10 INT Yes No number.of.parallel.consumers Size of the thread pool that should be used for polling. 1 INT No No Examples EXAMPLE 1 @source(type='sqs',queue='http://aws.sqs.queue.url',access.key='aws.access.key',secret.key='aws.secret.key',region='us-east-2',polling.interval='5000',max.number.of.messages='10',number.of.parallel.consumers='1',purge.messages='true',wait.time='2',visibility.timeout='30',delete.retry.interval='1000',max.number.of.delete.retry.attempts='10',@map(type='xml',enclosing.element= //events ,@attributes(symbol='symbol', message_id='trp:MESSAGE_ID') ))define stream inStream (symbol string, message_id string); Above example demonstrate how an SQS source is getting configured in order to consume messages from an SQS queue. SQS source will establish the connection to a queue using given configurations and start consuming xml messages from the queue. Once a message is received by the source from the given queue, 'xml' mapper will generate a siddhi event from that message and pass it to the inStream.","title":"sqs (Source)"}]}